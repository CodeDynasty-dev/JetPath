export declare const html = "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>JetPath API Preview</title>\n    <style>\n      body {\n        font-family: \"Segoe UI\", Tahoma, Geneva, Verdana, sans-serif;\n        margin: 0;\n        padding: 0;\n        background-color: #f4f4f4;\n        color: #333;\n      }\n\n      header {\n        background-color: #007bff; \n        text-align: center;\n        color: #fff;\n        font-size: 24px;\n        margin-bottom: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 1rem;\n      }\n\n      .request-container {\n        margin: 20px;\n        padding: 20px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        background-color: #fff;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        transition: transform 0.3s ease-in-out;\n        display: flex;\n        flex-direction: column;\n        gap: 12px;\n      }\n\n      .request {\n        margin-bottom: 10px;\n      }\n\n      .headers,\n      .payload {\n        margin-left: 20px;\n      }\n\n      .payload {\n        white-space: pre-wrap;\n      }\n\n      .test-button {\n        background-color: #007bff;\n        color: #fff;\n        border: none;\n        padding: 10px 18px;\n        border-radius: 5px;\n        cursor: pointer;\n        transition: background-color 0.3s ease-in-out;\n      }\n\n      .test-button:hover {\n        background-color: #0056b3;\n      }\n\n      .response-container {\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        background-color: #fff;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        display: none;\n        margin: 20px;\n        padding: 20px;\n      }\n      textarea {\n        margin-top: 0.4rem;\n        min-width: 60vw;\n        min-height: 10rem;\n        padding: 1rem;\n        border: 3px solid #007bff;\n        border-radius: 20px;\n        outline: none;\n      }\n      textarea#keys {\n        margin-top: 0.4rem;\n        min-width: 30vw;\n        min-height: 5rem;\n        padding: 0.6rem;\n        border: 2px solid #007bff;\n        border-radius: 10px;\n        outline: none;\n      }\n      textarea:focus {\n        border: 3px solid #007bff5e;\n      }\n    </style>\n  </head>\n  <body>\n    <header><img src=\"https://raw.githubusercontent.com/Uiedbook/JetPath/main/icon-transparent.webp\" alt=\"JetPath\" style=\"width: 7rem;\" > <h1>JetPath API Preview</h1></header>\n    <div class=\"request-container\">\n      <h4>headers:</h4>\n      <textarea id=\"keys\">\n {\n   \"Authetication\": \"Bearer ****\"\n     \n }</textarea\n      >\n    </div>\n    <h3 class=\"request-container\">Requests</h>\n    <script>\n      function parseApiDocumentation(apiDocumentation) {\n        const requests = (apiDocumentation\n          .split(\"###\")\n          .map((request) => request.trim())).filter((a)=>a !== \"\");\n\n        return requests.map(parseRequest);\n      }\n\n      function parseRequest(requestString) {\n        const lines = requestString.split(\"\\n\").map((line) => line.trim());\n\n        // Parse HTTP request line\n        const requestLine = lines[0].split(\" \");\n        const method = requestLine[0];\n        const url = requestLine[1];\n        const httpVersion = requestLine[2];\n\n        // Parse headers\n        const headers = {};\n        for (let i = 1; i < lines.length; i++) {\n          if (lines[i] === \"\") break; // Headers end when a blank line is encountered\n          const [key, value] = lines[i].split(\":\").map((part) => part.trim());\n          headers[key.toLowerCase()] = value;\n        }\n\n        // Parse payload if it exists\n        const payloadIndex = lines.indexOf(\"\") + 1;\n        const payload =\n          payloadIndex !== 0 ? lines.slice(payloadIndex).join(\"\\n\") : null;\n\n        return {\n          method,\n          url,\n          httpVersion,\n          headers,\n          payload,\n        };\n      }\n      // Example API documentation\n      const apiDocumentation = '{JETPATH}';\n\n      // Parse API documentation\n      const parsedApi = parseApiDocumentation(apiDocumentation);\n\n      // Display API documentation in UI and add testing functionality\n      parsedApi.forEach((request) => {\n        const requestContainer = document.createElement(\"div\");\n        requestContainer.classList.add(\"request-container\");\n\n        const requestInfo = document.createElement(\"div\");\n        requestInfo.classList.add(\"request\");\n        const urlInput = document.createElement(\"input\");\n        urlInput.type = \"text\";\n        urlInput.value = request.url;\n        requestInfo.appendChild(document.createTextNode(request.method + \" \"));\n        requestInfo.appendChild(urlInput);\n        requestInfo.appendChild(\n          document.createTextNode(\" \" + request.httpVersion)\n        );\n        requestContainer.appendChild(requestInfo);\n\n        const headersContainer = document.createElement(\"div\");\n        headersContainer.classList.add(\"headers\");\n        headersContainer.innerHTML = \"<strong>Headers:</strong>\";\n        for (const [key, value] of Object.entries(request.headers)) {\n          const headerInput = document.createElement(\"input\");\n          headerInput.type = \"text\";\n          headerInput.value = key+\": \"+value;\n          headersContainer.appendChild(document.createElement(\"br\"));\n          headersContainer.appendChild(headerInput);\n        }\n        requestContainer.appendChild(headersContainer);\n\n        if (request.payload) {\n          const payloadContainer = document.createElement(\"div\");\n          payloadContainer.classList.add(\"payload\");\n          payloadContainer.innerHTML = \"<strong>Payload:</strong><br>\";\n          const payloadTextarea = document.createElement(\"textarea\");\n          payloadTextarea.value = request.payload;\n          payloadContainer.appendChild(payloadTextarea);\n          requestContainer.appendChild(payloadContainer);\n        }\n\n        const testButton = document.createElement(\"button\");\n        testButton.classList.add(\"test-button\");\n        testButton.textContent = \"Test API\";\n        testButton.addEventListener(\"click\", async () => {\n          const updatedRequest = {\n            method: requestInfo.firstChild.textContent.trim(),\n            url: urlInput.value.trim(),\n            httpVersion: requestInfo.lastChild.textContent.trim(),\n            headers: {},\n            payload: \"\",\n          };\n\n          headersContainer.querySelectorAll(\"input\").forEach((headerInput) => {\n            const [key, value] = headerInput.value\n              .split(\":\")\n              .map((part) => part.trim());\n            if (key) {\n              updatedRequest.headers[key] = value || \"\";\n            }\n          });\n\n          if (request.payload) {\n            updatedRequest.payload = request.payload.trim();\n          }\nconst keys = document.getElementById(\"keys\");\nlet keysHeaders={}\ntry {\n  console.log(keys.value);\n  keysHeaders = JSON.parse(keys.value);\n} catch (error) {\n  alert(error);\n}\n          const response = await testApi(\n            updatedRequest.method,\n            updatedRequest.url,\n            Object.assign(updatedRequest.headers, keysHeaders),\n            updatedRequest.payload || undefined\n          ); \n          showApiResponse(response);\n        });\n        requestContainer.appendChild(testButton);\n\n        const responseContainer = document.createElement(\"div\");\n        responseContainer.classList.add(\"response-container\");\n        document.body.appendChild(requestContainer);\n        document.body.appendChild(responseContainer);\n\n        function showApiResponse(response) {\n          responseContainer.innerHTML = \"<strong>API Response:</strong><br>\";\n          responseContainer.innerHTML += \"<pre>\"+JSON.stringify(\n            response,\n            null,\n            2\n          )+\"</pre>\";\n          responseContainer.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n          });\n          responseContainer.style.display = \"block\";\n        }\n      });\n\n      async function testApi(method, url, headers, payload) {\n        try {\n          const response = await fetch(url, {\n            method,\n            headers,\n            body: payload,\n          });\n\n          const responseBody = await response.text();\n          return {\n            status: response.status,\n            headers: response.headers,\n            body: responseBody,\n          };\n        } catch (error) {\n          return { error: error.message };\n        }\n      }\n    </script>\n  </body>\n</html>";
